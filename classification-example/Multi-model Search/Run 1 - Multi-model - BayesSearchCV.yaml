description: BayesSearchCV using ClassifierSearchSpace
cross_validation_type: <class 'skopt.searchcv.BayesSearchCV'>
higher_score_is_better: true
number_of_splits: 10
score_names:
- roc_auc
parameter_names:
- model
- model__max_depth
- model__n_estimators
- model__learning_rate
- model__colsample_bytree
- model__subsample
- model__C
- prep__numeric__imputer__transformer
- prep__numeric__scaler__transformer
- prep__non_numeric__encoder__transformer
parameter_names_mapping:
  model: model
  model__max_depth: max_depth
  model__n_estimators: n_estimators
  model__learning_rate: learning_rate
  model__colsample_bytree: colsample_bytree
  model__subsample: subsample
  model__C: C
  prep__numeric__imputer__transformer: imputer
  prep__numeric__scaler__transformer: scaler
  prep__non_numeric__encoder__transformer: encoder
test_score_rankings:
  roc_auc:
  - 89
  - 59
  - 99
  - 83
  - 82
  - 85
  - 90
  - 97
  - 98
  - 70
  - 94
  - 40
  - 52
  - 79
  - 51
  - 54
  - 73
  - 92
  - 44
  - 64
  - 76
  - 56
  - 88
  - 80
  - 91
  - 19
  - 7
  - 34
  - 78
  - 43
  - 39
  - 55
  - 50
  - 41
  - 58
  - 18
  - 33
  - 60
  - 62
  - 23
  - 15
  - 57
  - 87
  - 5
  - 38
  - 10
  - 20
  - 1
  - 9
  - 36
  - 84
  - 2
  - 8
  - 95
  - 67
  - 48
  - 81
  - 96
  - 93
  - 77
  - 100
  - 53
  - 4
  - 6
  - 75
  - 74
  - 45
  - 65
  - 69
  - 13
  - 66
  - 72
  - 22
  - 32
  - 27
  - 46
  - 63
  - 31
  - 11
  - 3
  - 71
  - 86
  - 47
  - 42
  - 35
  - 30
  - 68
  - 28
  - 25
  - 24
  - 16
  - 37
  - 17
  - 29
  - 26
  - 14
  - 61
  - 49
  - 21
  - 12
test_score_averages:
  roc_auc:
  - 0.7107984398211129
  - 0.7463165459717082
  - 0.688874100192847
  - 0.7191806560641043
  - 0.7201125755666703
  - 0.7171035922344473
  - 0.7085999380257589
  - 0.7033434621955402
  - 0.6979176666374209
  - 0.7292024488198694
  - 0.7070443485878158
  - 0.758268816601843
  - 0.7540985763483902
  - 0.7226066073396618
  - 0.7548399327800863
  - 0.7507474653960047
  - 0.7279500771737092
  - 0.7082538821846515
  - 0.7565838793189573
  - 0.7368370127005262
  - 0.7253993775914165
  - 0.7502147441657336
  - 0.7113326042538495
  - 0.7216854176030922
  - 0.7083412229276669
  - 0.7658184960524522
  - 0.7707751611672152
  - 0.7598549201909294
  - 0.7234767645981818
  - 0.7572800976741819
  - 0.7588844689441306
  - 0.7502584333472129
  - 0.7554754541076999
  - 0.7576942671484203
  - 0.7474842760615948
  - 0.7658254635779692
  - 0.7601518119762989
  - 0.7401936506615934
  - 0.7379634075652943
  - 0.7634768321841431
  - 0.7674949037686207
  - 0.7495052739517578
  - 0.7163374805942728
  - 0.7724104027020298
  - 0.7589531094455044
  - 0.7703053688053974
  - 0.7654811114915367
  - 0.7820330854824931
  - 0.7704014764522105
  - 0.7593890777011749
  - 0.7174628453697113
  - 0.775088705838706
  - 0.7706515892002869
  - 0.7059296237808045
  - 0.731066506833865
  - 0.7556383341659723
  - 0.7202358500133933
  - 0.7038601716569002
  - 0.7071323545292963
  - 0.7244736602584991
  - 0.5717587698996895
  - 0.753830414886577
  - 0.77263438477538
  - 0.7713844781108408
  - 0.726159873814961
  - 0.7279492801544191
  - 0.756150817028503
  - 0.7335929260417916
  - 0.7304960925338084
  - 0.7677849647210857
  - 0.7333550743045943
  - 0.7285161298574417
  - 0.7636751126579754
  - 0.7610426644638952
  - 0.7626074151857979
  - 0.7559778293521016
  - 0.7373715037921852
  - 0.7613601182832603
  - 0.7697068921946373
  - 0.772714630594007
  - 0.7286309518304235
  - 0.7169346423873862
  - 0.7557683554964546
  - 0.757338700383712
  - 0.7596418333663576
  - 0.7614023501610434
  - 0.7308104861492455
  - 0.7618107055376641
  - 0.7629150621730714
  - 0.7632925836932574
  - 0.7666643753097595
  - 0.7593248728301095
  - 0.7662038204686898
  - 0.7617835618646409
  - 0.7626955277535478
  - 0.7676232213777034
  - 0.7400955410549549
  - 0.7555281010399786
  - 0.7650000354993118
  - 0.7696000208562963
test_score_standard_deviations:
  roc_auc:
  - 0.024319538565483006
  - 0.04650446327194506
  - 0.04146442013098315
  - 0.04254249700207936
  - 0.04067370956201433
  - 0.05987545356663839
  - 0.02580113944899387
  - 0.048644674335563486
  - 0.024642982892884607
  - 0.03411106961981662
  - 0.04079196210003025
  - 0.026212988358741505
  - 0.02147648846649909
  - 0.05088226490254675
  - 0.04023176948035467
  - 0.03891128063308732
  - 0.033696770106062215
  - 0.03605286666243159
  - 0.030297201646688764
  - 0.04593681730924279
  - 0.03387094422582463
  - 0.04461305644854873
  - 0.030215837071554737
  - 0.04244972440165194
  - 0.03346716033792802
  - 0.02836124769190648
  - 0.03561367962757168
  - 0.04484196696896805
  - 0.04785159309822684
  - 0.04115801812775008
  - 0.033915774585165454
  - 0.04144262851845266
  - 0.025497836975960947
  - 0.03232381813154937
  - 0.04109285393422058
  - 0.050785466035546324
  - 0.031887005125301154
  - 0.02680004380333766
  - 0.028961982326153934
  - 0.019668983735044884
  - 0.05833280339501341
  - 0.025891589322961612
  - 0.049571544252704006
  - 0.044063275080687365
  - 0.0236822544292647
  - 0.04545849101038738
  - 0.03738559224077207
  - 0.04119796951286821
  - 0.04880230809193669
  - 0.024436134223094538
  - 0.024051892748508743
  - 0.032529022408129174
  - 0.034423851818439426
  - 0.044442159991076896
  - 0.03485777445066755
  - 0.027558812287346905
  - 0.04003502090182094
  - 0.04742980981276128
  - 0.05331533711487489
  - 0.03354449030378178
  - 0.03694997166301372
  - 0.029360843609612136
  - 0.03705316365405034
  - 0.03640657388300346
  - 0.05235551676967078
  - 0.030629852818833913
  - 0.031601017300915225
  - 0.01790060138560684
  - 0.04156419819035666
  - 0.033842234305571435
  - 0.03470566769563965
  - 0.04290046907714177
  - 0.03261866392698969
  - 0.03624913762829093
  - 0.0212122447364149
  - 0.033253152032906914
  - 0.03143206931607143
  - 0.0300308416016756
  - 0.03972692734232271
  - 0.04959966441811643
  - 0.03782832043855269
  - 0.04453751656538631
  - 0.03798707130047941
  - 0.02717464432053954
  - 0.03260186751376507
  - 0.031901985860566855
  - 0.02532513507285909
  - 0.034992920634120156
  - 0.04515060017048329
  - 0.025963854228061693
  - 0.03065719967640289
  - 0.0323219203107264
  - 0.03141408149384119
  - 0.021255075074519566
  - 0.05563539641854333
  - 0.028385095996749096
  - 0.06115595516868693
  - 0.02298738686060086
  - 0.02924002412568823
  - 0.03103302039643968
trials:
- model: XGBClassifier(...)
  model__colsample_bytree: 0.8844821246070537
  model__learning_rate: 0.09798893186641074
  model__max_depth: 10
  model__n_estimators: 871
  model__subsample: 0.15608164675966435
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.9195352964526833
  model__learning_rate: 0.04040915598028404
  model__max_depth: 6
  model__n_estimators: 229
  model__subsample: 0.5082988094256691
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.1801528457825951
  model__learning_rate: 0.18343365247851712
  model__max_depth: 9
  model__n_estimators: 547
  model__subsample: 0.18590953529349413
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.44364889457651413
  model__learning_rate: 0.16271986876703082
  model__max_depth: 8
  model__n_estimators: 909
  model__subsample: 0.7453280360438532
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.9399760402267441
  model__learning_rate: 0.05744608180517957
  model__max_depth: 4
  model__n_estimators: 810
  model__subsample: 0.43532180018493205
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.7776107350396038
  model__learning_rate: 0.11411665025720713
  model__max_depth: 9
  model__n_estimators: 613
  model__subsample: 0.6351580315781546
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.9208091341729433
  model__learning_rate: 0.15397534404304786
  model__max_depth: 9
  model__n_estimators: 358
  model__subsample: 0.14602109830934662
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.7036152301751524
  model__learning_rate: 0.26277905925433237
  model__max_depth: 6
  model__n_estimators: 412
  model__subsample: 0.29027285854677665
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.819651719467114
  model__learning_rate: 0.22497199586672792
  model__max_depth: 5
  model__n_estimators: 600
  model__subsample: 0.3472433639518757
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.3648967073476305
  model__learning_rate: 0.15108900152803043
  model__max_depth: 7
  model__n_estimators: 395
  model__subsample: 0.7474387830916179
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.9051007896981281
  model__learning_rate: 0.01
  model__max_depth: 10
  model__n_estimators: 50
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.44769589907939394
  model__learning_rate: 0.01
  model__max_depth: 6
  model__n_estimators: 201
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 1000
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 1.0
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 559
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.016565571623193873
  model__max_depth: 6
  model__n_estimators: 873
  model__subsample: 0.13412263954991632
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.03001272138378317
  model__max_depth: 7
  model__n_estimators: 1000
  model__subsample: 0.1
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.6158220877481312
  model__learning_rate: 0.12599606934089888
  model__max_depth: 3
  model__n_estimators: 372
  model__subsample: 0.6734382481214993
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.3
  model__max_depth: 3
  model__n_estimators: 866
  model__subsample: 0.540689000976207
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.33744740512115007
  model__learning_rate: 0.01
  model__max_depth: 6
  model__n_estimators: 654
  model__subsample: 0.7366619457392197
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.834926509777976
  model__learning_rate: 0.01
  model__max_depth: 5
  model__n_estimators: 50
  model__subsample: 0.9845372901841917
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.01
  model__max_depth: 4
  model__n_estimators: 202
  model__subsample: 0.5698155792551021
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 1.0
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 50
  model__subsample: 0.12276454245838765
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 1.0
  model__learning_rate: 0.3
  model__max_depth: 10
  model__n_estimators: 50
  model__subsample: 0.17499070578616147
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.044102690900824144
  model__learning_rate: 0.11237798207406245
  model__max_depth: 5
  model__n_estimators: 101
  model__subsample: 0.47995196136193397
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.01
  model__max_depth: 6
  model__n_estimators: 50
  model__subsample: 0.7613760594802105
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.17077268297160947
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 868
  model__subsample: 0.864320521231444
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.19667324754631943
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 601
  model__subsample: 0.8603675614315246
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.29406913693415815
  model__learning_rate: 0.01
  model__max_depth: 9
  model__n_estimators: 283
  model__subsample: 0.8910232447265045
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.19333066942821028
  model__learning_rate: 0.1373430785723163
  model__max_depth: 4
  model__n_estimators: 579
  model__subsample: 0.9708095311753357
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.36622470784602956
  model__learning_rate: 0.01
  model__max_depth: 10
  model__n_estimators: 304
  model__subsample: 0.5241206861399146
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.1969397652286055
  model__learning_rate: 0.01
  model__max_depth: 5
  model__n_estimators: 695
  model__subsample: 0.9206933057469958
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.4241384338738281
  model__learning_rate: 0.09827473604613687
  model__max_depth: 7
  model__n_estimators: 50
  model__subsample: 0.948764233533038
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.17894537233742916
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 654
  model__subsample: 0.4108865736956847
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.5767688709683672
  model__learning_rate: 0.01
  model__max_depth: 6
  model__n_estimators: 227
  model__subsample: 0.1
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.44660266503671153
  model__learning_rate: 0.01
  model__max_depth: 10
  model__n_estimators: 497
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.32825214847784273
  model__learning_rate: 0.01
  model__max_depth: 5
  model__n_estimators: 456
  model__subsample: 0.4031303988521152
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.14317002437494578
  model__learning_rate: 0.01
  model__max_depth: 10
  model__n_estimators: 865
  model__subsample: 0.1
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.4545667213236768
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 50
  model__subsample: 0.9229633949410136
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.4465976282616014
  model__learning_rate: 0.03503738506447257
  model__max_depth: 10
  model__n_estimators: 50
  model__subsample: 0.1
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.2922108930028314
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 1000
  model__subsample: 0.1
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.21443773171738564
  model__learning_rate: 0.01
  model__max_depth: 4
  model__n_estimators: 711
  model__subsample: 0.4451078264367311
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.5099444659391104
  model__learning_rate: 0.01
  model__max_depth: 7
  model__n_estimators: 1000
  model__subsample: 0.1
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.01
  model__learning_rate: 0.3
  model__max_depth: 3
  model__n_estimators: 50
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.08729679880145731
  model__learning_rate: 0.01
  model__max_depth: 5
  model__n_estimators: 666
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.073023479183718
  model__learning_rate: 0.01
  model__max_depth: 10
  model__n_estimators: 666
  model__subsample: 0.7456709646478988
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.21759667718927536
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 529
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.1612923073430179
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 764
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.150034504380928
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 559
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.08584698462790309
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 535
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: XGBClassifier(...)
  model__colsample_bytree: 0.2061123843982279
  model__learning_rate: 0.01
  model__max_depth: 3
  model__n_estimators: 495
  model__subsample: 1.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.009474228306002645
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.1008351069818223
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.24163963925466223
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 1.7033396978190108e-05
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 14.672831421886087
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 15.37978393681839
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 7.848325978575754e-05
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 4.8647742529313864e-05
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.017031055748232164
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.06454163020202347
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 1.0e-06
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.0031557095142783673
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.09740303612038734
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 100.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 1.0108402738018783e-06
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 82.00655103627365
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 77.93487741241073
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 99.46753234510702
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 100.0
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 1.231955887780983
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.0018501103482678129
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 1.0e-06
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 11.690012912630827
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='median')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 0.07950476975474531
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 3.4497191880937
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 100.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.010347027765937869
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.5430952049660253
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 0.8550497267015585
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.5869394626678875
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.14054546917555719
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 1.0e-06
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 9.525986721523156
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.3065750774838236
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 3.528719894810549
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 100.0
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.16139241031481363
  prep__non_numeric__encoder__transformer: CustomOrdinalEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.2997492487499292
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.3765060096220259
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.39272954969164475
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.32402926238869323
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 0.9431912708863899
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: StandardScaler()
- model: LogisticRegression(...)
  model__C: 0.3965482054938199
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.3787339237761938
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.3883412559152578
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.3846168190145471
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 98.08635768335898
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer()
  prep__numeric__scaler__transformer: MinMaxScaler()
- model: LogisticRegression(...)
  model__C: 82.4678945961749
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.3919480397535425
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
- model: LogisticRegression(...)
  model__C: 0.38322357267823637
  prep__non_numeric__encoder__transformer: OneHotEncoder()
  prep__numeric__imputer__transformer: SimpleImputer(strategy='most_frequent')
  prep__numeric__scaler__transformer: None
timings:
  fit time averages:
  - 0.9463577032089233
  - 0.6200272083282471
  - 0.1962801456451416
  - 1.1780351638793944
  - 1.4552201509475708
  - 0.6274530172348023
  - 0.209373140335083
  - 0.4819734334945679
  - 0.7807215452194214
  - 0.3922464609146118
  - 0.15401668548583985
  - 0.3423094987869263
  - 0.30220096111297606
  - 1.020776891708374
  - 0.2504562854766846
  - 0.25633265972137453
  - 0.22457222938537597
  - 0.2321699857711792
  - 0.8943914651870728
  - 0.15192792415618897
  - 0.0862032413482666
  - 0.09405372142791749
  - 0.12234599590301513
  - 0.06421666145324707
  - 0.031546616554260255
  - 0.9698397874832153
  - 1.012291955947876
  - 0.6228800535202026
  - 0.42771785259246825
  - 0.3587809562683105
  - 0.3689680814743042
  - 0.11659581661224365
  - 0.609743332862854
  - 0.19140105247497557
  - 1.3396124601364137
  - 0.4592402696609497
  - 0.23777611255645753
  - 0.05895485877990723
  - 0.04156603813171387
  - 0.4192502975463867
  - 0.4746311902999878
  - 0.4471670866012573
  - 0.023937273025512695
  - 0.3933596134185791
  - 0.37998600006103517
  - 0.30044662952423096
  - 0.3822310447692871
  - 0.2647127866744995
  - 0.230629563331604
  - 0.2682300567626953
  - 0.02477872371673584
  - 0.11353621482849122
  - 0.09091002941131592
  - 0.03322243690490723
  - 0.04531395435333252
  - 0.030857324600219727
  - 0.032067155838012694
  - 0.02715280055999756
  - 0.03257331848144531
  - 0.034980273246765135
  - 0.020731592178344728
  - 0.023491430282592773
  - 0.0189683198928833
  - 0.14718339443206788
  - 0.03061671257019043
  - 0.03827323913574219
  - 0.05642423629760742
  - 0.10270373821258545
  - 0.09818053245544434
  - 0.02362399101257324
  - 0.011958885192871093
  - 0.011792135238647462
  - 0.03533194065093994
  - 0.028930282592773436
  - 0.09145278930664062
  - 0.05183289051055908
  - 0.027655482292175293
  - 0.025035452842712403
  - 0.11519289016723633
  - 0.08700189590454102
  - 0.030080080032348633
  - 0.02670886516571045
  - 0.10747087001800537
  - 0.07325429916381836
  - 0.03431911468505859
  - 0.11500728130340576
  - 0.08482351303100585
  - 0.05870776176452637
  - 0.06940765380859375
  - 0.07273054122924805
  - 0.02458212375640869
  - 0.044196367263793945
  - 0.07836942672729492
  - 0.07148146629333496
  - 0.07785117626190186
  - 0.09047296047210693
  - 0.0389955997467041
  - 0.10330696105957031
  - 0.0770026683807373
  - 0.07340309619903565
  fit time standard deviations:
  - 0.15099195946452615
  - 0.10277051555927152
  - 0.028864008821453103
  - 0.18047321442512523
  - 0.2607344434737657
  - 0.08688588281058253
  - 0.025659315272422902
  - 0.07007444574715314
  - 0.09738873015262084
  - 0.06145707297250464
  - 0.02141347353612747
  - 0.04961938841813552
  - 0.0565453823277289
  - 0.1329675557810246
  - 0.02885695758029035
  - 0.04262071926139217
  - 0.0382301340872827
  - 0.029052796634287628
  - 0.130808432650981
  - 0.024920624663156157
  - 0.020033302858533237
  - 0.023907284564197717
  - 0.019100525001795477
  - 0.01591751169352796
  - 0.01595959722859165
  - 0.1275634971324485
  - 0.20440186876842725
  - 0.08190546543965964
  - 0.08860082206192016
  - 0.04965247995813436
  - 0.05515051649117739
  - 0.016743943058033183
  - 0.10161929761867622
  - 0.028157378890968258
  - 0.19944714818150303
  - 0.06373576203627693
  - 0.03498010917119725
  - 0.00663019339042591
  - 0.00803622826652607
  - 0.06351190382460586
  - 0.06949743118567309
  - 0.08121395692320416
  - 0.0045785250829930395
  - 0.06426972962312769
  - 0.056631888972838475
  - 0.04458438783585911
  - 0.054746080838334016
  - 0.039281921694644804
  - 0.03527960273604591
  - 0.04124848823724027
  - 0.0036099851081002276
  - 0.0393002837087463
  - 0.029367264525367972
  - 0.007895912457521793
  - 0.006942699305985471
  - 0.006038092196384823
  - 0.008369144161069146
  - 0.004045623848300917
  - 0.006405937694898991
  - 0.007260818944297419
  - 0.006615143052528485
  - 0.005163340785066058
  - 0.0059771529948706124
  - 0.07021287464575851
  - 0.01275790670539023
  - 0.006471498870157418
  - 0.023914257357395826
  - 0.03907832752824472
  - 0.027398118916676237
  - 0.0057303604968754855
  - 0.0026159860240132175
  - 0.002083408250824132
  - 0.011492744561967869
  - 0.009386112404837405
  - 0.030886162511999403
  - 0.01707071938801822
  - 0.0060092590713329026
  - 0.00827159521578537
  - 0.061444072020657416
  - 0.031815130309681
  - 0.005577719793378821
  - 0.006718680777619243
  - 0.04583967204062052
  - 0.02935979365077909
  - 0.016283666692633623
  - 0.05339938276868116
  - 0.020362335261916456
  - 0.025913120403158157
  - 0.022210191178116248
  - 0.03153753900126317
  - 0.010647581178400116
  - 0.018028149592671416
  - 0.0343191626685347
  - 0.030203706834184576
  - 0.029200487514620937
  - 0.03876258507620113
  - 0.009481380871777774
  - 0.05725411485680868
  - 0.03675240801778435
  - 0.03412003885753894
  score time averages:
  - 0.031047892570495606
  - 0.030809569358825683
  - 0.024295830726623537
  - 0.012936830520629883
  - 0.009746932983398437
  - 0.026725912094116212
  - 0.020463967323303224
  - 0.01131281852722168
  - 0.01038815975189209
  - 0.03761968612670898
  - 0.022836732864379882
  - 0.009408259391784668
  - 0.016312432289123536
  - 0.025091004371643067
  - 0.011686253547668456
  - 0.012777900695800782
  - 0.01945009231567383
  - 0.030580902099609376
  - 0.012766623497009277
  - 0.015720248222351074
  - 0.02196817398071289
  - 0.010541653633117676
  - 0.011379504203796386
  - 0.020314455032348633
  - 0.01018521785736084
  - 0.01974911689758301
  - 0.04575223922729492
  - 0.01627326011657715
  - 0.01210634708404541
  - 0.023969697952270507
  - 0.021501612663269044
  - 0.011772465705871583
  - 0.015778708457946777
  - 0.012864470481872559
  - 0.013658666610717773
  - 0.012711191177368164
  - 0.02141423225402832
  - 0.018988609313964844
  - 0.00877997875213623
  - 0.010445070266723634
  - 0.01070575714111328
  - 0.028837013244628906
  - 0.008763790130615234
  - 0.013733673095703124
  - 0.012096357345581055
  - 0.008512353897094727
  - 0.009135770797729491
  - 0.011420583724975586
  - 0.011996221542358399
  - 0.009598088264465333
  - 0.012482786178588867
  - 0.03037290573120117
  - 0.006033611297607422
  - 0.012511873245239257
  - 0.011556363105773926
  - 0.005350518226623535
  - 0.012517070770263672
  - 0.011551594734191895
  - 0.01262819766998291
  - 0.019651317596435548
  - 0.0065070390701293945
  - 0.008769392967224121
  - 0.007783150672912598
  - 0.012255001068115234
  - 0.008355093002319337
  - 0.012724924087524413
  - 0.012199091911315917
  - 0.01920428276062012
  - 0.01552412509918213
  - 0.006690025329589844
  - 0.004676389694213867
  - 0.004496026039123535
  - 0.005835986137390137
  - 0.008366012573242187
  - 0.0055420160293579105
  - 0.011346006393432617
  - 0.006297874450683594
  - 0.006114578247070313
  - 0.011548018455505371
  - 0.006437611579895019
  - 0.013972282409667969
  - 0.013278317451477051
  - 0.006281805038452148
  - 0.005187010765075684
  - 0.006454038619995117
  - 0.007288670539855957
  - 0.02123370170593262
  - 0.00565032958984375
  - 0.009826087951660156
  - 0.008394241333007812
  - 0.007843112945556641
  - 0.011500120162963867
  - 0.009067201614379882
  - 0.006627774238586426
  - 0.006732511520385742
  - 0.008778929710388184
  - 0.006316351890563965
  - 0.007951974868774414
  - 0.005805110931396485
  - 0.008076715469360351
  score time standard deviations:
  - 0.01622960820771692
  - 0.015922248943714776
  - 0.011673132925357923
  - 0.004738202162384357
  - 0.0028311019254195127
  - 0.01099332437526166
  - 0.008519322221523525
  - 0.006403033897279487
  - 0.0033932930488860583
  - 0.01754252830019137
  - 0.010340360135570202
  - 0.004321171713275656
  - 0.010045168147457118
  - 0.007174846466965462
  - 0.0052124060562251115
  - 0.0049147377795945415
  - 0.006460934542518327
  - 0.015271534472087673
  - 0.0038898612370939344
  - 0.008491198707427676
  - 0.007958112919325591
  - 0.0030124569681193674
  - 0.004522413177190989
  - 0.008563705761490318
  - 0.003987235707510429
  - 0.007818552329794264
  - 0.020133451435046773
  - 0.00489378182683323
  - 0.005459484382567422
  - 0.008004840801442795
  - 0.005502949725403787
  - 0.0047563639026393725
  - 0.007130776557157888
  - 0.009344647620645529
  - 0.0035505078989669725
  - 0.006257236014220626
  - 0.005150778373703137
  - 0.004818180512344761
  - 0.004428982370439359
  - 0.0033276691104561287
  - 0.003120197352735222
  - 0.01220523183373334
  - 0.0034922308436716757
  - 0.005062224860804447
  - 0.0053895442071325165
  - 0.0026624201280722446
  - 0.0038489129598899643
  - 0.004705730134033266
  - 0.007422550827571502
  - 0.0036125682692946647
  - 0.0031540972617621296
  - 0.015146762568432974
  - 0.0024045330595438806
  - 0.0038223948542213722
  - 0.003479251120230166
  - 0.002303615168716229
  - 0.003826308358504233
  - 0.0028194842236842466
  - 0.0034348730843393326
  - 0.007829877007667328
  - 0.004448793080601805
  - 0.0035091138058232466
  - 0.00418091708460192
  - 0.005224477480215503
  - 0.003627937022366067
  - 0.003836440663102044
  - 0.010557827948722785
  - 0.005354832968107463
  - 0.003519124768388524
  - 0.003032152144953857
  - 0.0013749855765739707
  - 0.0007259543969314186
  - 0.002211922778680433
  - 0.003987274107867442
  - 0.0019565338481984476
  - 0.005539534799370365
  - 0.0025705131050123274
  - 0.002221236623917798
  - 0.006518808297269263
  - 0.0029600285882920158
  - 0.003595705648963726
  - 0.0037347740641549307
  - 0.0028766649212159955
  - 0.0012498458583289841
  - 0.0029286735348969003
  - 0.0024094086394372545
  - 0.006797993487160359
  - 0.0032048232227966647
  - 0.0024542009472369214
  - 0.004648121990064621
  - 0.0038770044865836747
  - 0.006083185717739508
  - 0.004251242622872573
  - 0.0033546383730872226
  - 0.003027608699678431
  - 0.003844370439489305
  - 0.003058270739213387
  - 0.003206847275567199
  - 0.0024231124551439324
  - 0.0041166071187891595
